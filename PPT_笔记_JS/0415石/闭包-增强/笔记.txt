1.闭包中的this的问题
	this对象是基于其运行的环境，如果this在全局范围运行，那么this代表window
	如果在对象内部，那么代表对象本身。但是闭包运行的时候，是指向window
	，因为闭包不属于对象中的属性和方法。
	var user = "the window";
	var obj = {
		user:"zhangsan",
		getUser:function() {
			return function() {
				return this.user;
			}
		}
	};
	alert(obj.getUser()());
 如何解决this在闭包中的问题？
	特点：将匿名函数所在函数中的局部变量驻留在内存中
	var user = "the window";
	var obj = {
		user:"zhangsan",
		getUser:function() {
			var that = this;
			return function() {
				return that.user;
			}
		}
	};
	
	
2.块级作用域（私有作用域）：js没有块级作用的概念
  模拟块级作用域
  为什么js中没有块级作用域的概念？
	function box() {
			for(var i=0;i<5;i++){
				//按理封闭的区间
			}
			alert(i);
			var i;
			alert(i);
	}		
	box();
  以上说明：在js中没有块级作用域的概念，if{} for(){}等操作都没有；
  一般如果有块级作用域，那么在其中定义的局部变量，当块级作用域执行完成
  就会销毁。
  就算是重新声明了此变量，也不会改变其原来的值。JavaScript不会提醒你是否
  多次声明了此变量。遇到这样的操作，js只会对此视而不见。
  
  解决方案：模拟块级作用域：
  (function(){
	//在其中，相当于在块级作用域中
  
  })();
  事例：
  function box() {
		(function(){
			for(var i=0;i<5;i++){
				//按理封闭的区间
			}
		})();
		
		alert(i);
		var i;
		alert(i);
	}		
	box();
	好处：当块级作用域（私有作用域）执行完之后，所有在块级作用域中
	定义的局部变量，都会被销毁。在做项目的过程中，是很多人同时开发，
	负责不同的模块，如果每个人都在自己的作用域中处理功能，那么各个模块
	之间不会相互影响的，杜绝了全局的变量的污染，比如出现命名冲突，负赋值
	的影响等一些灾难性的问题。
		闭包非常的占用内存，但是在块级作用域中，只要闭包执行完成，
	那么就会被销毁。
 3)私有变量：
	封装性：将实例属性隐藏，不让外部直接访问，
	外部只能通过，暴漏函数访问。
  
	function Person() {
		var name="zhangsan";//私有变量
		this.getName = function() {
			return name;
		}
	}
		  
	var person = new Person();
	alert(person.getName());
	alert(person.name);
  
  
  
  
  
	
	
	
	
	
	